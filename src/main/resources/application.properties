# port on which our API Gateway is running, port must be available.
# Typically, I make it run in port 8080 but
# during development, I run it on different port
server.port=8082
# application name
spring.application.name=api-gateway
# Eureka client service url
eureka.client.service-url.defaultZone=http://localhost:8010/eureka

# Below 2 properties, Sergey deleted before starting work on "manually configuring api gateway routes" lesson
# To enable discovery locator feature to enable gateway routing.  This will make our
# Spring Cloud Gateway automatically map and route http requests to destination web services
# provided that request is sent to a microservice using its application name.  When we enable it,
# we can start our gateway service but first start Eureka Discovery Service, then start UserService,
# and then ApiGateway
# Lesson 187 "Using Header Predicate: commented out discoery locator 2 lines
#spring.cloud.gateway.discovery.locator.enabled=true
# If we dont provide this property, the app name in the URL will have to be all capital leters (as
# registered by Eureka Discovery Service).  WE add this property to enable using the URL and specifying
# application name in lower case leters to follow common way URLs are
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# To configure manualy routes, we use .routes with index of route and give it a meaningfull name like below
# 'users-status-check'
spring.cloud.gateway.routes[0].id=users-status-check
# We also need to provide the URI but we cannot hardcode it since microservices get random port so we use
# "lb" which stands for "load balancer" so Spring Cloud will use the build in load balacer that comes with it
# and then the name of our microservice under which it is registered with Eureka discovery service.  The
# load balancer will then route the request to one of the instances of users microservice.
spring.cloud.gateway.routes[0].uri=lb://users-ws
# Just as routes, there could be multiple predicates so we also use index on them.  These are Java8 predicates
# and are used to match request using headers or HTTP method and then route request to the destination URI.  So,
# below, if the request URL path matches "/users/status/check", then our Spring Cloud Api Gateway will route this
# request to destination api we specified in route[0].uri and if Method is GET as specified by 2nd predicate.
# If the request were POST request, then the Api Gateway would not route it because that would not match below
# predicates.  You can use comma to separate multiple values for for example "=Method=GET,POST,PUT" etc.
# spring.cloud.gateway.routes[0].predicates[0]=Path=/users/status/check
spring.cloud.gateway.routes[0].predicates[0]=Path=/users-ws/users/status/check
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
# Lesson 187 "Using Header Predicate: add 3rd predicate for header with value "Bearer " and any number of chars after
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
# we can also configure filters that can be applied when routing requests via api gateway, for example below
# we apply filter to remove all request cookies since microservice may not need cookies, it may be that all
# it needs is the JWT access token.  Below RemoveRequestHeader is a built-in filter for which we do not need
# to write any code but later, we will also see how to write our own custom filter that will be used to
# validate JWT access token
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
# To see how we can rewrite the path to a different internal path we first changed above
# spring.cloud.gateway.routes[0].predicates[0]=Path=/users/status/check to
# spring.cloud.gateway.routes[0].predicates[0]=Path=/users-ws/users/status/check
# and we will now use RewritePath gateway filter to rewrite this path to /users/status/check path (so, path
# without /users-ws in front of it).  The RewritePath filter is a built in filter for which we dont need to
# write any code.  We just need to specify couple of parameters it expects.  It expects 2 parameters, 1st is the
# external path and the 2nd one is the internal path which is the rewrite path.  So, our filter will expect
# path /users-ws/users/status/check (as provided by predicate[0]=Path above) and will rewrite it to rewrite path
# /users/status/check
# spring.cloud.gateway.routes[0].filters[1]=RewritePath=It expects 2 parameters, 1st is the
# external path and the 2nd one is the internal path which is the rewrite path.  So, our filter will expect
# path /users-ws/users/status/check (as provided by predicate[0]=Path above and will rewrite it to rewrite path
# /users/status/check.  This means our UserService Controller must have request mapping to handle GET method
# (as per above predicate[1] setting), and this internal path /users/status/check.
# spring.cloud.gateway.routes[0].filters[1]=RewritePath=/users-ws/users/status/check, /users/status/check
# we could use regular expression to rewrite RewritePath into:
# Lesson 187 "Using Header Predicate: uncommented out filter[1] line RewritePath
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}
# adding 3rd filter in order to make AuthorizationHeaderFilter executes for this specific route and check JWT token
spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter

# new route for POST request to create new user account
spring.cloud.gateway.routes[1].id = users-ws
spring.cloud.gateway.routes[1].uri = lb://users-ws
spring.cloud.gateway.routes[1].predicates[0]=Path=/users-ws/users
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

# new route for POST request to login
spring.cloud.gateway.routes[2].id = users-ws-login
spring.cloud.gateway.routes[2].uri = lb://users-ws
spring.cloud.gateway.routes[2].predicates[0]=Path=/users-ws/users/login
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

# new route for GET, PUT, DELETE request to get, update, or delete user details
spring.cloud.gateway.routes[3].id = users-ws-get-update-delete
spring.cloud.gateway.routes[3].uri = lb://users-ws
spring.cloud.gateway.routes[3].predicates[0]=Path=/users-ws/users/**
spring.cloud.gateway.routes[3].predicates[1]=Method=GET,PUT,DELETE
spring.cloud.gateway.routes[3].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]=AuthorizationHeaderFilter
spring.cloud.gateway.routes[3].filters[2]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

# new route for GET /users-ws/actuator/mappings
spring.cloud.gateway.routes[4].id = users-ws-get-actuator-mappings
spring.cloud.gateway.routes[4].uri = lb://users-ws
spring.cloud.gateway.routes[4].predicates[0]=Path=/users-ws/actuator/**
spring.cloud.gateway.routes[4].predicates[1]=Method=GET
#spring.cloud.gateway.routes[4].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[4].filters[0]=RemoveRequestHeader=Cookie
# Enabling this will require to add Authorization header to request
#spring.cloud.gateway.routes[4].filters[1]=AuthorizationHeaderFilter
spring.cloud.gateway.routes[4].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

# Jwt signing key token secret value (just random string)
token.secret=asdfiupoaasqew111

spring.config.import=optional:configserver:http://localhost:8012

# connection credentials for RabbitMQ server
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# Actuators
management.endpoints.web.exposure.include=beans,health,gateway,httptrace
